#pragma kernel SetupParticles
#pragma kernel SetupParticlesImmediately
#pragma kernel Disable

#pragma kernel UpdateAsTarget
#pragma kernel UpdateAsExplosion
#pragma kernel UpdateAsOrbit
#pragma kernel UpdateAsGravity
#pragma kernel UpdateAsMoveTo

#define THREAD_NUM 64

#define PI 3.1415926535

#include "./NoiseMath.cginc"

struct TransformParticle
{
    int isActive;
    int targetId;
    float2 uv;

    float3 targetPosition;

    float speed;
    float3 position;

    int useTexture;
    float scale;

    float4 velocity;

    float3 horizontal;
};

struct InitData
{
    int isActive;
    float3 targetPosition;

    int targetId;
    float scale;

    float4 velocity;

    float2 uv;
    float3 horizontal;
};

RWStructuredBuffer<TransformParticle> _Particles;
StructuredBuffer<InitData> _InitDataList;
StructuredBuffer<float4x4> _MatrixData;
StructuredBuffer<uint> _IndexBuffer;

float _DeltaTime;
float _Time;
float _Gravity;
float3 _Origin;
float _GlobalScale;
float _GlobalScaleRatio;

/////////////////////////////////////////////////////////////////////////////////////////
// For Setup

[numthreads(THREAD_NUM, 1, 1)]
void SetupParticles(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    uint idx = _IndexBuffer[id];

    float4x4 mat = _MatrixData[_InitDataList[idx].targetId];

    p.isActive = _InitDataList[idx].isActive;
    p.targetPosition = mul(mat, float4(_InitDataList[idx].targetPosition, 1.0)).xyz;
    p.uv = _InitDataList[idx].uv;
    p.targetId = _InitDataList[idx].targetId;
    p.scale = _InitDataList[idx].scale;
    p.horizontal = _InitDataList[idx].horizontal;
    p.velocity = _InitDataList[idx].velocity;

    _Particles[id] = p;
}

[numthreads(THREAD_NUM, 1, 1)]
void SetupParticlesImmediately(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    uint idx = _IndexBuffer[id];

    float4x4 mat = _MatrixData[_InitDataList[idx].targetId];

    p.isActive = _InitDataList[idx].isActive;
    p.position = mul(mat, float4(_InitDataList[idx].targetPosition, 1.0)).xyz;
    p.targetPosition = p.position;
    p.uv = _InitDataList[idx].uv;
    p.targetId = _InitDataList[idx].targetId;
    p.scale = _InitDataList[idx].scale;
    p.horizontal = _InitDataList[idx].horizontal;
    p.velocity = _InitDataList[idx].velocity;

    _Particles[id] = p;
}

[numthreads(THREAD_NUM, 1, 1)]
void Disable(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];
    p.isActive = 0;
    _Particles[id] = p;
}

/////////////////////////////////////////////////////////////////////////////////////////
// For udpates.

[numthreads(THREAD_NUM, 1, 1)]
void UpdateAsTarget(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    float3 delta = p.targetPosition - p.position;
    float3 pos = (delta + p.velocity.xyz * 0.2) * _DeltaTime * p.speed;

    const float k = 5.5;
    p.velocity.xyz -= k * p.velocity.xyz * _DeltaTime;

    p.position += pos;
    p.useTexture = 1;
    p.scale *= _GlobalScaleRatio;

    _Particles[id] = p;
}

[numthreads(THREAD_NUM, 1, 1)]
void UpdateAsExplosion(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    float3 pos = (p.velocity.xyz) * p.velocity.w * _DeltaTime;

    float s = sin(rand(id) + _Time) * 0.00003;
    p.velocity.xyz += s;
    float k = 2.0;
    p.velocity.xyz -= k * p.velocity.xyz * _DeltaTime;

    p.position += pos;
    p.scale *= _GlobalScaleRatio;

    p.useTexture = 0;

    _Particles[id] = p;
}

[numthreads(THREAD_NUM, 1, 1)]
void UpdateAsGravity(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    float power = p.velocity.w;

    float3 d = p.position - _Origin;
    float3 up = normalize(d);
    float3 forward = normalize(cross(up, p.horizontal) + 0.00001);

    p.velocity.xyz += (forward * power * 0.3) * _DeltaTime * p.isActive;

    p.velocity.xyz += up * _Gravity * _DeltaTime;

    const float k = 2.5;
    p.velocity.xyz -= k * p.velocity.xyz * _DeltaTime;

    p.position += p.velocity.xyz * _DeltaTime;
    p.scale += (_GlobalScale - p.scale) * _DeltaTime;
    p.scale *= _GlobalScaleRatio;

    _Particles[id] = p;
}

[numthreads(THREAD_NUM, 1, 1)]
void UpdateAsOrbit(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    float power = p.velocity.w;

    float3 d = p.position - _Origin;
    float3 up = normalize(d);
    float3 forward = normalize(cross(up, p.horizontal) + 0.00001);
    float s = saturate(length(d)) * 5.0;

    p.velocity.xyz += (forward * power) * _DeltaTime * p.isActive;

    p.velocity.xyz += up * _Gravity * s * 2.0 * _DeltaTime;

    const float k = 5.5;
    p.velocity.xyz -= k * p.velocity.xyz * _DeltaTime;

    p.position += p.velocity.xyz * _DeltaTime;
    p.scale = 1.5 * _GlobalScaleRatio;

    _Particles[id] = p;
}

[numthreads(THREAD_NUM, 1, 1)]
void UpdateAsMoveTo(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    float power = p.velocity.w;

    float3 d = p.position - _Origin;
    float3 up = normalize(d);
    float3 forward = normalize(cross(up, p.horizontal) + 0.00001);

    p.velocity.xyz += (forward + (up * _Gravity)) * _DeltaTime * p.isActive;

    const float k = 2.3 * power;
    p.velocity.xyz -= k * p.velocity.xyz * _DeltaTime;

    p.position += p.velocity.xyz * _DeltaTime;
    p.scale += (_GlobalScale - p.scale) * _DeltaTime;

    _Particles[id] = p;
}

